data = training_fold,
method="class",
minbucket=27)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=27)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=27)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=27)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=27)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=27)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=27)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=27)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=27)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
#Since I detected some relationship between the C and survival (and Q,S and not survival) I will transform in quantitative value
sum(titanic_train$Survived[titanic_train$Embarked=="C"])/sum(titanic_train$Embarked=="C")
sum(titanic_train$Survived[titanic_train$Embarked=="Q"])/sum(titanic_train$Embarked=="Q")
sum(titanic_train$Survived[titanic_train$Embarked=="S"])/sum(titanic_train$Embarked=="S")
titanic_train$Embarked = as.numeric(ifelse(titanic_train$Embarked=="C",0,ifelse(titanic_train$Embarked=="Q",1,2)))
titanic_test$Embarked = as.numeric(ifelse(titanic_test$Embarked=="C",0,ifelse(titanic_test$Embarked=="Q",1,2)))
Titanic_Tree = rpart(Survived ~ Pclass + Sex + SibSp + Parch + Embarked, data = titanic_train, method="class", minbucket=20)
prp(Titanic_Tree)
predictTitanic = predict(Titanic_Tree, newdata = titanic_train, type = "class")
confusion_treee = table(predictTitanic, titanic_train$Survived)
print(accuracy(confusion_treee))
#--------------------- Helper Function ----------------------------------#
csv_submision <- function(filename, predicted_value, labels){
output = list()
output$PassengerId = labels
output$Survived = as.integer(predicted_value)
write.table(output, file = filename,row.names=FALSE, sep = ",")
}
# calculating accuracy from confusion matrix
accuracy <- function(confusion_matrix){
accuracy = (confusion_matrix[1,1] + confusion_matrix[2,2])/(confusion_matrix[1,1] + confusion_matrix[2,2] + confusion_matrix[1,2] + confusion_matrix[2,1])
return(accuracy)
}
print(accuracy(confusion_treee))
folds = createFolds(titanic_train$Survived, k = 10)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Embarked,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Embarked,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Embarked,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Embarked,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Embarked,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Embarked,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Embarked,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Embarked,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
folds = createFolds(titanic_train$Survived, k = 10)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Embarked,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
# CART model
Titanic_Tree = rpart(Survived ~ Pclass + Sex + SibSp + Parch + Embarked, data = titanic_train, method="class", minbucket=30)
prp(Titanic_Tree)
predictTitanic = predict(Titanic_Tree, newdata = titanic_train, type = "class")
prp(Titanic_Tree)
predictTitanic = predict(Titanic_Tree, newdata = titanic_train, type = "class")
confusion_treee = table(predictTitanic, titanic_train$Survived)
print(accuracy(confusion_treee))
# calculating accuracy from confusion matrix
accuracy <- function(confusion_matrix){
accuracy = (confusion_matrix[1,1] + confusion_matrix[2,2])/(confusion_matrix[1,1] + confusion_matrix[2,2] + confusion_matrix[1,2] + confusion_matrix[2,1])
return(accuracy)
}
# CART model
Titanic_Tree = rpart(Survived ~ Pclass + Sex + SibSp + Parch + Embarked, data = titanic_train, method="class", minbucket=30)
prp(Titanic_Tree)
predictTitanic = predict(Titanic_Tree, newdata = titanic_train, type = "class")
confusion_treee = table(predictTitanic, titanic_train$Survived)
print(accuracy(confusion_treee))
predictTitanic
csv_submision("submission8.csv",predictTitanic, labels)
cv = lapply(folds, function(x) {
training_fold = titanic_train[-x,]
test_fold = titanic_train[x,]
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Embarked,
data = training_fold,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = test_fold, type = "class")
cm = table(predictTitanic, test_fold['Survived'][,1])
print(cm)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
print(accuracy)
titanic_tree <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Embarked,
data = titanic_train,
method="class",
minbucket=30)
predictTitanic = predict(titanic_tree, newdata = titanic_test, type = "class")
csv_submision("submission8.csv",predictTitanic, labels)
predict(titanic_tree, newdata = titanic_test, type = "class")
predictTitanic = predict(titanic_tree, newdata = titanic_test, type = "class")
csv_submision("submission8.csv",predictTitanic, labels)
csv_submision <- function(filename, predicted_value, labels){
output = list()
output$PassengerId = labels
output$Survived = predicted_value
write.table(output, file = filename,row.names=FALSE, sep = ",")
}
csv_submision("submission8.csv",predictTitanic, labels)
#building the model
logitMod = glm(Survived ~ Sex + Pclass + SibSp, data = titanic_train, family = binomial(link="logit"))
summary(logitMod)
# Making predictions on training set
predictTrain1 = predict(logitMod, type="response")
summary(predictTrain1)
table1 <- table(predictTrain1>0.5, titanic_train$Survived)
#####0.8002245
accuracy(table1)
# calculating accuracy from confusion matrix
accuracy <- function(confusion_matrix){
accuracy = (confusion_matrix[1,1] + confusion_matrix[2,2])/(confusion_matrix[1,1] + confusion_matrix[2,2] + confusion_matrix[1,2] + confusion_matrix[2,1])
return(accuracy)
}
predictTrain1 = predict(logitMod, type="response")
summary(predictTrain1)
table1 <- table(predictTrain1>0.5, titanic_train$Survived)
#####0.8002245
accuracy(table1)
#prediction on the test set
predictTest = predict(logitMod, type="response", newdata=titanic_test)
output = as.numeric(ifelse(predictTest>0.5, 1, 0))
#save file in order to submit
csv_submision("submission.csv", output, labels)
